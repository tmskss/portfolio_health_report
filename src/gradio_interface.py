import gradio as gr
import requests
import os

from dotenv import load_dotenv, find_dotenv
from typing import Generator, Any

def process_files(files: list) -> Generator[Any, Any, Any]:
    """
    Process the text files uploaded by the user.

    This function is a Gradio generator that takes a list of text files and
    processes them by uploading them to the backend server, waiting for the
    server to generate a report, and then returning the report to the user.

    The function yields a string at several points during processing, which
    are displayed to the user in the Gradio interface. The final yield is the
    report generated by the backend server.

    Args:
        files (list or tuple): A list of text files or a single text file
            to be processed.

    Yields:
        str: A status message or error message to be displayed to the user.
    """
    load_dotenv(find_dotenv())
    
    yield "Processing your text files... Please wait."
    
    # Create a temporary directory to store uploaded files
    temp_dir = os.getenv("EMAILS_DIR")
    os.makedirs(temp_dir, exist_ok=True)
    
    # Check if files is a list (multiple files) or a single file
    if not isinstance(files, list):
        files = [files]
    
    # Save uploaded files to the temp directory
    file_paths = []
    for file_tuple in files:
        # Gradio Files component returns a tuple with the file path as the first element
        file_path = file_tuple
        if isinstance(file_tuple, tuple):
            file_path = file_tuple[0]  # Extract the file path from the tuple
        
        # Copy the file to the temp directory
        new_path = os.path.join(temp_dir, os.path.basename(file_path))
        if os.path.exists(file_path):
            with open(file_path, "r") as file:
                file_content = file.read()
            with open(new_path, "w") as new_file:
                new_file.write(file_content)
            file_paths.append(new_path)
    if not file_paths:
        yield "No valid text files were uploaded."
        return
    
    try:
        yield "Files uploaded. Waiting for AI to create report. This may take a few minutes..."
        
        # Send the directory path to the Flask endpoint
        response = requests.post(
            "http://backend:5001/analyze"
        )
        
        # Clean up temporary files after processing
        for path in file_paths:
            if os.path.exists(path):
                os.remove(path)
        
        # Check if response is valid JSON
        if response.status_code == 200:
            try:
                result = response.json()["report"]
                yield result
            except Exception as json_err:
                yield f"Error parsing JSON response: {str(json_err)}\nResponse text: {response.text[:500]}"
        else:
            yield f"Server error: {response.status_code} - {response.text}"
    except Exception as e:
        yield f"Error processing text files: {str(e)}"

# Create Gradio interface
with gr.Blocks() as demo:
    gr.Markdown("# Project Portfolio Health Report Generator")
    
    with gr.Row():
        gr.Markdown(
            """Upload your email files to generate a portfolio health report.
            You also need to upload a `Colleagues.txt` containing the characters found in the emails."""
            )

    with gr.Row():
        text_input = gr.Files(label="Upload Emails", file_types=["text"])
    
    with gr.Row():
        submit_btn = gr.Button("Process Emails")
    
    with gr.Row():
        output = gr.Markdown(label="Processing Results")
    
    # Connect the submit button to process txt files
    submit_btn.click(fn=process_files, inputs=[text_input], outputs=[output])

if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860)